"use strict";(self.webpackChunkmedispeak_temp=self.webpackChunkmedispeak_temp||[]).push([[260],{1304:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"projects/open-source-ai","title":"Open Source AI Models Integration","description":"Overview","source":"@site/docs/projects/open-source-ai.md","sourceDirName":"projects","slug":"/projects/open-source-ai","permalink":"/docs/projects/open-source-ai","draft":false,"unlisted":false,"editUrl":"https://github.com/medispeak/docs/tree/main/docs/projects/open-source-ai.md","tags":[],"version":"current","frontMatter":{}}');var r=i(4848),t=i(8453);const l={},o="Open Source AI Models Integration",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Project Details",id:"project-details",level:2},{value:"Skills Required",id:"skills-required",level:2},{value:"Acceptance Criteria",id:"acceptance-criteria",level:2},{value:"Milestones",id:"milestones",level:2},{value:"Phase 1: Research &amp; Setup (30-40 hours)",id:"phase-1-research--setup-30-40-hours",level:3},{value:"Phase 2: Core Integration (40-50 hours)",id:"phase-2-core-integration-40-50-hours",level:3},{value:"Phase 3: Optimization &amp; Features (30-40 hours)",id:"phase-3-optimization--features-30-40-hours",level:3},{value:"Phase 4: Testing &amp; Documentation (20-30 hours)",id:"phase-4-testing--documentation-20-30-hours",level:3}];function d(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"open-source-ai-models-integration",children:"Open Source AI Models Integration"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Integration with various open-source AI models for transcription and understanding, enabling local deployment and customization options."}),"\n",(0,r.jsx)(n.h2,{id:"project-details",children:"Project Details"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complexity"}),": Large"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Estimated Time"}),": 120-160 hours"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mentors"}),": Bodhish (BE), Bijoy (BE)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Project Links"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Backend: ",(0,r.jsx)(n.a,{href:"https://github.com/medispeak/medispeak-backend",children:"https://github.com/medispeak/medispeak-backend"})]}),"\n",(0,r.jsxs)(n.li,{children:["Frontend: ",(0,r.jsx)(n.a,{href:"https://github.com/medispeak/medispeak-app",children:"https://github.com/medispeak/medispeak-app"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"skills-required",children:"Skills Required"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python"}),"\n",(0,r.jsx)(n.li,{children:"TensorFlow/PyTorch"}),"\n",(0,r.jsx)(n.li,{children:"Ruby on Rails"}),"\n",(0,r.jsx)(n.li,{children:"Docker"}),"\n",(0,r.jsx)(n.li,{children:"Machine Learning fundamentals"}),"\n",(0,r.jsx)(n.li,{children:"Audio processing"}),"\n",(0,r.jsx)(n.li,{children:"API development"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"acceptance-criteria",children:"Acceptance Criteria"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Successfully integrate at least 2 open-source speech-to-text models"}),"\n",(0,r.jsx)(n.li,{children:"Implement model switching capability"}),"\n",(0,r.jsx)(n.li,{children:"Achieve 90%+ accuracy in medical terminology transcription"}),"\n",(0,r.jsx)(n.li,{children:"Support local model deployment"}),"\n",(0,r.jsx)(n.li,{children:"Enable model fine-tuning for medical specialties"}),"\n",(0,r.jsx)(n.li,{children:"Implement performance monitoring and optimization"}),"\n",(0,r.jsx)(n.li,{children:"Complete documentation for model integration and deployment"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"milestones",children:"Milestones"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-research--setup-30-40-hours",children:"Phase 1: Research & Setup (30-40 hours)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Research and select suitable open-source models"}),"\n",(0,r.jsx)(n.li,{children:"Set up development environment"}),"\n",(0,r.jsx)(n.li,{children:"Create proof of concept with one model"}),"\n",(0,r.jsx)(n.li,{children:"Document initial findings and approach"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-core-integration-40-50-hours",children:"Phase 2: Core Integration (40-50 hours)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement model integration framework"}),"\n",(0,r.jsx)(n.li,{children:"Develop API endpoints for model interaction"}),"\n",(0,r.jsx)(n.li,{children:"Create model switching mechanism"}),"\n",(0,r.jsx)(n.li,{children:"Set up basic model training pipeline"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-optimization--features-30-40-hours",children:"Phase 3: Optimization & Features (30-40 hours)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement local deployment support"}),"\n",(0,r.jsx)(n.li,{children:"Add model fine-tuning capabilities"}),"\n",(0,r.jsx)(n.li,{children:"Optimize performance"}),"\n",(0,r.jsx)(n.li,{children:"Add monitoring and logging"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-testing--documentation-20-30-hours",children:"Phase 4: Testing & Documentation (20-30 hours)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Comprehensive testing across different scenarios"}),"\n",(0,r.jsx)(n.li,{children:"Performance benchmarking"}),"\n",(0,r.jsx)(n.li,{children:"Complete technical documentation"}),"\n",(0,r.jsx)(n.li,{children:"Create user guides and deployment documentation"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);